---
name: Templete Deploy
run-name: Terraform Deploy Workflow

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string

jobs:
  Deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup Environment variable
        run: |
          echo "ENVIRONMENT=${{ inputs.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "👷ENVIRONMENT: ${{ inputs.ENVIRONMENT }}"

      - name: Checkout Template Code
        uses: actions/checkout@v4
        with:
          repository: edelux/terraform
      - name: Backup Templates
        run: |
          ls -l
          tar cf ../templates.tar templates && rm -fr templates

      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Restore Templates
        run: tar xf ../templates.tar && rm ../templates.tar

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: apt install
        run: |
          sudo apt-get -qq update && sudo apt-get upgrade -yqq >/dev/null 2>&1
          sudo apt-get install -qqy j2cli gettext >/dev/null 2>&1

      - name: Create Backend
        run: |

          ## Create Bucket if not exist
          if aws s3api head-bucket --bucket "${{ vars.AWS_S3_BACKEND }}" >/dev/null 2>&1 ; then
            echo "♻️ S3 bucket already exists. Skipping creation."
          else
            echo "⚠️ Bucket not found, Creating it now..."
            mkdir -p /tmp/backend
            j2 templates/1.bootstrap.j2 -o /tmp/backend/main.tf
            terraform -chdir=/tmp/backend init
            terraform -chdir=/tmp/backend apply -auto-approve

            ( \
              AWS_S3_BACKEND_KEY='s3backend/terraform.tfstate' \
              j2 terraform/templates/2.bootstrap.j2 -o /tmp/backend/main.tf \
            )

            terraform -chdir=/tmp/backend init -migrate-state -input=false -force-copy
            terraform -chdir=/tmp/backend apply -auto-approve && \
              echo "✅ Terraform state migrated successfully" || \
                { echo "❌ State migration failed."; exit 1; }
            rm -fr /tmp/backend
          fi

          ## Create remote stats for environment if not exist
          if aws s3 ls "s3://${{ secrets.AWS_S3_BACKEND }}/env:/${{ inputs.ENVIRONMENT }}/${{ vars.AWS_S3_BACKEND_KEY }}" >/dev/null 2>&1 ; then
            echo "♻ S3 terraform state for ${{ inputs.ENVIRONMENT }} already exists."
          else
            j2 templates/backend.j2 -o backend.conf && echo "✨Created backend.conf"
            terraform init -backend-config=backend.conf
            terraform workspace new ${{ inputs.ENVIRONMENT }} && echo "👷 ${{ inputs.ENVIRONMENT }} workspace "
            terraform workspace list
            rm -fr .terraform* 2>&1 >/dev/null
          fi

      - name: Init
        run: |

          j2 templates/backend.j2 -o backend.conf && echo "✨ Created backend.conf"

          terraform init -backend-config=backend.conf
          terraform workspace select ${{ inputs.ENVIRONMENT }} && \
             echo "👷 ${{ inputs.ENVIRONMENT }} workspace " || \
                { echo "🚨${{ inputs.ENVIRONMENT }} workspace don't exist🚨'" ; exit 1; }

          echo "👷terraform workspace list" && terraform workspace list

      - name: Validate
        run: |
          terraform validate && echo "✅" || { echo "💥"; exit 1; }

      - name: Apply
        run: |
          terraform apply -var="environment=$ENVIRONMENT" -auto-approve && \
             printf '%s\n' '✨✨✨' "✨✨  Deploy ${{ inputs.ENVIRONMENT }}   🏗️ " '✨' || \
                { printf '%s\n' '🔥🔥🔥' '🔥🔥Error to Deploy    🚑️' '🔥'; exit 1; }
