---
name: Templete Deploy
run-name: Terraform OIDC Workflow

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  Deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:

      - name: Checkout Template Code
        uses: actions/checkout@v4
        with:
          repository: edelux/terraform
      - name: Backup Templates
        run: |
          pwd
          ls -l
          tar cf ../templates.tar templates && rm -fr templates LICENSE README.md

      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Restore Templates
        run: tar xf ../templates.tar && rm ../templates.tar

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: apt install
        run: |
          sudo apt-get -qq update && sudo apt-get upgrade -yqq >/dev/null 2>&1
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -qqy j2cli gettext >/dev/null

      - name: Create Backend
        run: |
          export AWS_REGION=${{ vars.AWS_REGION }}
          export AWS_S3_BACKEND=${{ vars.AWS_S3_BACKEND }}
          export AWS_S3_BACKEND_KEY=${{ vars.AWS_S3_BACKEND_KEY }}

          ## Create Bucket if not exist
          if aws s3api head-bucket --bucket "${{ vars.AWS_S3_BACKEND }}" >/dev/null 2>&1 ; then
            echo "♻️ S3 bucket already exists. Skipping creation."
          else
            echo "⚠️ Bucket not found, Creating it now..."
            mkdir -p /tmp/backend
            j2 templates/1.bootstrap.j2 -o /tmp/backend/main.tf
            cat /tmp/backend/main.tf
            terraform -chdir=/tmp/backend init
            terraform -chdir=/tmp/backend apply -auto-approve

            ( \
              AWS_S3_BACKEND_KEY="s3backend/terraform.tfstate" \
              j2 terraform/templates/2.bootstrap.j2 -o /tmp/backend/main.tf \
            )
            cat /tmp/backend/main.tf

            terraform -chdir=/tmp/backend init -migrate-state -input=false -force-copy
            terraform -chdir=/tmp/backend apply -auto-approve && \
              echo "✅ Terraform state migrated successfully" || \
                { echo "❌ State migration failed."; exit 1; }
            rm -fr /tmp/backend
          fi

      - name: Init
        run: |
          export AWS_REGION=${{ vars.AWS_REGION }}
          export AWS_S3_BACKEND=${{ vars.AWS_S3_BACKEND }}
          export AWS_S3_BACKEND_KEY=${{ vars.AWS_S3_BACKEND_KEY }}

          j2 templates/backend.j2 -o backend.conf && echo "✨ Created backend.conf"
          cat backend.conf
          terraform init -backend-config backend.conf

      - name: Validate
        run: |
          terraform validate && echo "✅" || { echo "💥"; exit 1; }

      - name: Apply
        run: |
          terraform apply -auto-approve && \
             printf '%s\n' '✨✨✨' "✨✨  Deploy  🏗️ " '✨' || \
                { printf '%s\n' '🔥🔥🔥' '🔥🔥Error to Deploy    🚑️' '🔥'; exit 1; }
