---
name: Deploy Infraestructure
run-name: Deploy Workflow - dev

on:
  workflow_dispatch:
  push:
    branches:
      - 'fix/*'
      - 'feat/*'
      - 'feature/*'
    paths:
      - '*.tf'
      - 'templates/*.*'
      - 'modules/*/*.tf'
      - 'configs.yaml'
      - 'configs.yaml.j2'

jobs:
  Deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Setup Environment variable
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "üë∑$ENVIRONMENT"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: apt install
        run: |
          sudo apt update 2>&1> /dev/null
          test -e /usr/bin/j2       ||  sudo apt install -y j2cli 2>&1> /dev/null    && echo "‚ú® j2-> Istalled sussesfuly"        || echo "üí• j2-> Installed faulere"
          test -e /usr/bin/envsubst ||  sudo apt install -y gettext 2>&1> /dev/null  && echo "‚ú® envsubst-> Istalled sussesfuly"  || echo "üí• envsubst-> Installed faulere"

      - name: Create Backend
        run: |
          export AWS_S3_BACKEND=${{ secrets.AWS_S3_BACKEND }}
          export AWS_BACKEND_KEY_NETWORKING=${{ vars.AWS_BACKEND_KEY_NETWORKING }}

          ## Create Bucket if not exist
          if aws s3 ls "s3://${{ secrets.AWS_S3_BACKEND }}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "‚ö†Ô∏è Bucket not found, It will be created"

            mkdir -p backend
            j2 -e AWS_S3_BACKEND templates/backend.bootstrap.j2 -o backend/main.tf
            terraform -chdir=backend workspace new bootstrap || true
            terraform -chdir=backend init
            terraform -chdir=backend apply -auto-approve
            echo "‚úÖ Terraform backend created successfully."

            aws s3 cp backend/terraform.tfstate.d/bootstrap/terraform.tfstate s3://${{ secrets.AWS_S3_BACKEND }}/bootstrap/ 
            echo "‚ú® Terraform backed up successfully."
          else
            echo "‚ôªÔ∏è S3 bucket already exists."
          fi

          ## Create remote stats for environment if not exist
          if aws s3 ls "s3://${{ secrets.AWS_S3_BACKEND }}/env:/${{ env.ENVIRONMENT }}/${{ vars.AWS_BACKEND_KEY_NETWORKING }}" ; then
            echo "‚ôª S3 terraform state for ${{ env.ENVIRONMENT }} already exists."
          else
            j2 -e AWS_S3_BACKEND -e AWS_BACKEND_KEY_NETWORKING templates/backend.j2 -o backend.conf && echo "‚ú® backend.conf"
            cat backend.conf
            ls -la
            terraform init -backend-config=backend.conf
            terraform workspace list
            terraform workspace new ${{ env.ENVIRONMENT }} && echo "üë∑ ${{ env.ENVIRONMENT }} workspace "
            rm -fr .terraform* 2>&1 >/dev/null
          fi

          unset AWS_S3_BACKEND AWS_BACKEND_KEY_NETWORKING

      - name: Init
        run: |
          export AWS_S3_BACKEND=${{ secrets.AWS_S3_BACKEND }}
          export AWS_BACKEND_KEY_NETWORKING=${{ vars.AWS_BACKEND_KEY_NETWORKING }}

          j2 -e AWS_S3_BACKEND -e AWS_BACKEND_KEY_NETWORKING templates/backend.j2 -o backend.conf && echo "‚ú® backend.conf"
          unset AWS_BACKEND_KEY_NETWORKING AWS_S3_BACKEND
          terraform init -backend-config=backend.conf
          terraform workspace select ${{ env.ENVIRONMENT }}
          echo "üë∑terraform workspace list" && terraform workspace list

      - name: Lint
        run: |
          terraform fmt -recursive -check
          echo "‚úÖ"

      - name: Config repo yaml
        run: |
          test -e configs.yaml    && j2 configs.yaml    -o configs.yaml
          test -e configs.yaml.j2 && j2 configs.yaml.j2 -o configs.yaml

      - name: Validate
        run: |
          terraform validate
          echo "‚úÖ"

      - name: Plan
        run: | 
          export MYIPS=${{ secrets.MYIPS || '' }}; echo "TF_VAR_allowed_ips=$MYIPS" >> $GITHUB_ENV
          terraform plan -var="environment=$ENVIRONMENT"
          echo "‚úÖ" 

      - name: Apply
        run: |
          terraform apply -var="environment=$ENVIRONMENT" -auto-approve
          echo "‚ú®‚ú®"
          echo "‚ú®Deploy ${{ env.ENVIRONMENT }}"
          echo "üçª"
